setwd("~/GitHub/Shiny-App-Random-Forest/ShinyApp")
library('rsconnect')
deployApp()
deployApp(appName="Sony-ShinyApp")
setwd("~/GitHub/Shiny-App-Random-Forest/ShinyApp")
shiny::runApp()
runApp()
read.csv('input_data.csv')
setwd("~/GitHub/Shiny-App-Random-Forest/ShinyApp")
read.csv('input_data.csv')
read.csv('input_data.csv')
list.files()
runApp()
deployApp()
deployApp(appName="Sony-ShinyApp")
runApp()
read_csv('new_input.csv')
read.csv('new_input.csv')
df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('input data.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df <- t(df)
df <- df[, c(2, 1)]
colnames(df) <- c('parameter','value')
df <- as.data.frame(df)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df <- t(df)
df <- df[, c(2, 1)]
colnames(df) <- c('parameter','value')
df <- as.data.frame(df)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
df_T[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df_T)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df
df_T <- t(df)
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df_T
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('new_input.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_
df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('new_input.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df_T
df <- read.csv('new_input.csv', header = TRUE)
df
df <- read.csv('new_input2.csv', header = TRUE)
df[2, ] <- names(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df_T
df <- read.csv('new_input2.csv', header = TRUE)
df[2, ] <- names(df)
df <- read.csv('new_input2.csv', header = TRUE)
df
df[2, ]
df[2, ] <- names(df)
df
names(df)
df <- read.csv('new_input2.csv', header = TRUE)
df[2, ] <- names(df)
df
df
df
df
df
rs.restartR()
df
colnames(df)
df <- read.csv('new_input2.csv', header = TRUE)
df[2, ] <- colnames(df)
df
df <- read.csv('new_input2.csv', header = TRUE, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
df
shiny::runApp()
df <- read.csv('new_input2.csv', header = TRUE, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
df
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
colnames(df)
colnames(df)[1]
colnames(df)[2]
df
runApp()
df_pred <- predictions(df)
df_pred
df$prediction.total
sum(df_pred$prediction)
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df
df_pred <- predictions(df)
df+pred
df_pred
sum(df_pred$prediction)
addmargins(df)
df
addmargins(df_pred)
addmargins(df_pred$predictions)
x["Total" ,] <- colSums(x)
df_pred["Total" ,] <- colSums(df_pred)
df_pred
rownames(df_pred) <- df_pred$model
df_pred
df_pred[, model]
df_pred[,model]
df_pred$model
df[ , !('model')]
df[ , !('model'), DROP=false]
df_pred$prediction
df_pred[, ('model')]
df_pred[, ('prediction')]
df_pred <- df_pred[, ('prediction')]
runApp()
rbind( pred_df[1:3,], Benz, pred_df[ 4,] )
pred_df
df_pred
rbind( df_pred[1:3,], Benz, df_pred[ 4,] )
rbind( df_pred[1:2,], Benz, df_pred[ 4,] )
dim(df_pred)
df_pred
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df_pred <- predictions(df)
df_pred
rbind( df_pred[1:2,], Benz, df_pred[ 4,] )
tot = data.frame(model = "Total", prediction = total(df_pred$prediction))
tot = data.frame(model = "Total", prediction = sum(df_pred$prediction))
tot
rbind( df_pred[1:2,], tot, df_pred[ 4,] )
df_pred
rbind( df_pred[1:14,], tot, df_pred[ 4,] )
rbind( df_pred[1:5,], tot, df_pred[ 4,] )
df_pred
rbind( df_pred[1:4,], tot, df_pred[ 4,] )
rbind( df_pred[1:4,], tot)
rbind( df_pred[1:5,], tot)
runApp()
inFile
dim(df)
dim(df)[0]
dim(df)[1]
runApp()
runApp()
df
dim(df)
dim(df)[1] != 1
dim(df)[1] -= 1
dim(df)[1] == 1
runApp()
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df
df <- read.csv('new_input.csv', header = TRUE)#, stringsAsFactors=FALSE)
df
dim(df)[1] == 1
dim(df)[1] != 1
runApp()
df_pred
barplot(df_pred$prediction, main="Car Distribution",
xlab="Number of Gears")
barplot(df_pred$prediction, main="Predicted Sales Distribution",
xlab="Number of Gears")
barplot(df_pred$prediction, main="Predicted Sales Distribution",
xlab="Model")
df_pred
df_pred$model
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=df_pred$model
xlab="Model")
barplot(df_pred$prediction, main="Predicted Sales Distribution",
xlab="Model")
levels(df_pred$model)
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=levels(df_pred$model)
xlab="Model")
df_pred$model
c(df_pred$model)
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=c(df_pred$model)
xlab="Model")
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=c(df_pred$model),
xlab="Model")
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=(df_pred$model),
xlab="Model")
runApp()
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
install.packages('plotly')
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
runApp()
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
runApp()
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
list.files
list.files()
library(plotly)
packageVersion('plotly')
runApp()
plot_ly(mtcars, x = ~mpg, y = ~wt)
plot_ly(df_pred, x = ~prediction)
df_pred
py.iplot(df_pred)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
df_pred
plot_ly(df_pred,
x = model,
y = prediction,
name = "SF Zoo",
type = "bar"
)
df_pred
plot_ly(df_pred,
x = ~model,
y = ~prediction,
name = "SF Zoo",
type = "bar"
)
runApp()
deployApp
deployApp()
library('rsconnect')
deployApp(appName="Sony-ShinyApp")
runApp()
shiny::runApp()
df
df_pred
runApp()
df_pred
df_predlibrary('rsconnect')
deployApp(appName="Sony-ShinyApp")
library('rsconnect')
deployApp(appName="Sony-ShinyApp")
runApp()
library("shiny")
library("shinydashboard")
library("datasets")
library("DT")
header <- dashboardHeader()
sidebar <- dashboardSidebar()
body <- dashboardBody(
DT::dataTableOutput("mtcarsTable")
)
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$mtcarsTable <- renderDataTable({
DT::datatable(datasets::mtcars,
options = list(rowCallback = JS('
function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
// Bold and green cells for conditions
if (parseFloat(aData[3]) >= 200)
$("td:eq(3)", nRow).css("font-weight", "bold");
if (parseFloat(aData[3]) >= 100)
$("td:eq(3)", nRow).css("background-color", "#9BF59B");
}')
)
)
})
}
)
install.packages('DT')
install.packages("DT")
library(DT)
datatable(iris)
shiny::runApp()
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df_T
typeof(df_T)
runApp()
deployApp(appName="Sony-ShinyApp")
library('rsconnect')
deployApp(appName="Sony-ShinyApp")
df_pred
source("scenario_planner.R")
#df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_
barplot(df_pred$prediction, main="Predicted Sales Distribution", names.arg=(df_pred$model),
xlab="Model")
df_pred
typeof(df_pred)
as.data.frame(df_pred)
typeof(df_pred)
df_pred <-as.data.frame(df_pred)
typeof(df_pred)
mtcars
typeof(mtcars)
datatable(head(iris), class = 'cell-border stripe')
datatable(head(mtcars), class = 'cell-border stripe')
datatable(head(df_pred), class = 'cell-border stripe')
datatable(head(df_T), class = 'cell-border stripe')
df_T
#df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
df_T
df
df_T
datatable(head(df_pred), class = 'cell-border stripe')
source("scenario_planner.R")
#df <- read.csv('input data.csv', header = TRUE)
df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_pred <-as.data.frame(df_pred)
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
#df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_pred <-as.data.frame(df_pred)
datatable(head(df_pred), class = 'cell-border stripe')
df_pred
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
#df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_pred < -as.data.frame(df_pred)
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
#df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
df_pred$prediction <- sapply(df_pred$prediction, FUN=function(x) prettyNum(x, big.mark=","))
df_pred <- as.data.frame(df_pred)
datatable(head(df_pred), class = 'cell-border stripe')
df
df_pred
df_pred
df_pred
source("scenario_planner.R")
df <- read.csv('input data.csv', header = TRUE)
#df <- read.csv('new_input2.csv', header = TRUE)#, stringsAsFactors=FALSE)
df[2, ] <- colnames(df)
#df <-df[,c(2,1)]
df_T <- t(df)
df_T <- df_T[, c(2, 1)]
colnames(df_T) <- c('parameter','value')
df_T <- as.data.frame(df_T)
###################
df_pred <- predictions(df)
df_pred
datatable(head(df_pred), class = 'cell-border stripe')
datatable(df_pred, class = 'cell-border stripe')
datatable(df_T, class = 'cell-border stripe')
datatable(df_T$value, class = 'cell-border stripe')
datatable(df_T, class = 'cell-border stripe')
df
df <- read.csv('input data.csv', header = TRUE)
df_pred <- predictions(df)
df_pred
datatable(df_T, class = 'cell-border stripe')
runApp()
datatable(df_pred, class = 'cell-border stripe')
runApp()
df_pred
makeIndexCol(df_pred)
makeIndexCol <- function(df){
df$ID<-seq.int(nrow(df))
df
}
makeIndexCol(df_pred)
