setwd("~/GitHub/Shiny-App-Random-Forest")
shiny::runApp()
runApp()
rm(list = ls())
library(shiny)
ui = fluidPage(
sidebarPanel(
fileInput('file1', 'Choose file to upload',accept = c('text/csv','text/comma-separated-values','text/tab-separated-values','text/plain','.csv','.tsv')),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator',c(Comma=',',Semicolon=';',Tab='\t'),'Comma'),
radioButtons('quote', 'Quote',c(None='','Double Quote'='"','Single Quote'="'"),'Double Quote'),
actionButton("Load", "Load the File"),width = 3),
mainPanel(tableOutput("my_output_data"))
)
server = function(input, output) {
data1 <- reactive({
if(input$Load == 0){return()}
inFile <- input$file1
if (is.null(inFile)){return(NULL)}
isolate({
input$Load
my_data <- read.csv(inFile$datapath, header = input$header,sep = input$sep, quote = input$quote,stringsAsFactors =FALSE)
colnames(my_data) <-c("Dose","Response")
my_data$ResponseLog <- log10(my_data$Response + 1)
my_data$ResponseSqRoot <- sqrt(my_data$Response + 1)
})
my_data
})
output$my_output_data <- renderTable({data1()},include.rownames=FALSE)
}
runApp(list(ui = ui, server = server))
help(rm)
runApp()
rm(list = ls())
library(shiny)
ui = fluidPage(
sidebarPanel(
fileInput('file1', 'Choose file to upload',accept = c('text/csv','text/comma-separated-values','text/tab-separated-values','text/plain','.csv','.tsv')),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator',c(Comma=',',Semicolon=';',Tab='\t'),'Comma'),
radioButtons('quote', 'Quote',c(None='','Double Quote'='"','Single Quote'="'"),'Double Quote'),
actionButton("Load", "Load the File"),width = 3),
mainPanel(tableOutput("my_output_data"))
)
server = function(input, output) {
data1 <- reactive({
if(input$Load == 0){return()}
inFile <- input$file1
if (is.null(inFile)){return(NULL)}
isolate({
input$Load
my_data <- read.csv(inFile$datapath, header = input$header,sep = input$sep, quote = input$quote,stringsAsFactors =FALSE)
colnames(my_data) <-c("Dose","Response")
my_data$ResponseLog <- log10(my_data$Response + 1)
my_data$ResponseSqRoot <- sqrt(my_data$Response + 1)
})
my_data
})
output$my_output_data <- renderTable({data1()},include.rownames=FALSE)
}
runApp(list(ui = ui, server = server))
runApp()
runApp('old-working-app')
runApp('new-app')
runApp(display.mode = 'showcase')
setwd("~/GitHub/Shiny-App-Random-Forest/new-app")
setwd("~/GitHub/Shiny-App-Random-Forest/new-app")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp('~/GitHub/Shiny-App-Random-Forest/old-working-app')
runApp('~/GitHub/Shiny-App-Random-Forest/old-working-app')
runApp()
mtcars
mtcars[]
mtcars[;1]
mtcars[:1]
mtcars[1:5]
mtcars[1:2]
runApp()
runApp()
mtcars
write.csv(mtcars)
runApp()
library(shiny)
options(shiny.maxRequestSize = 9*1024^2)
server <- shinyServer(function(input, output) {
data <- eventReactive(input$go, {
validate(
need(input$file1, "Choose a file!")
)
inFile <- input$file1
read.csv(inFile$datapath, header = input$header,
sep = input$sep, quote = input$quote)
})
output$plot <- renderPlot({
set <- data()
plot(set[, 1], set[, 2] * input$param)
})
})
ui <- shinyUI(fluidPage(
titlePanel("Uploading Files"),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose file to upload',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"'),
tags$hr(),
p('If you want a sample .csv or .tsv file to upload,',
'you can first download the sample',
a(href = 'mtcars.csv', 'mtcars.csv'), 'or',
a(href = 'pressure.tsv', 'pressure.tsv'),
'files, and then try uploading them.'
),
actionButton("go", "Load File and plot"),
sliderInput("param", "Parameter", 0, 1, value = 0.1, step = 0.1, animate = TRUE)
),
mainPanel(
tableOutput('contents'),
plotOutput("plot")
)
)
))
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp(display.mode = 'showcase')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
installed.packages('RCurl')
rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
.libPaths()
RInside
installed.packages('RCurl')
rsconnect::setAccountInfo(name="cdaly", token="A80F7EF5BB8B04964B46A84F7B3AA57C", secret="i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE")
RCurl
lib(RCurl)
library(RCurl)
rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
