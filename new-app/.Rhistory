rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
install.packages('RCurl')
rsconnect::setAccountInfo(name='cdaly', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
library(rsconnect)
deployApp()
setwd("~/GitHub/Shiny-App-Random-Forest/new-app")
library(rsconnect)
deployApp()
shiny::runApp()
library(rsconnect)
deployApp()
runApp()
predictions
df
df1
list.files()
df1 <- read.csv('input_data.csv')
df1 <- read.csv("input data.csv")
predictions(df1)
summary(df1)
runApp()
install.packages('DT')
runApp()
install.packages('markdown')
runApp()
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Deafult actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2"),
tabPanel("Tab 3")
)
)
),
tabPanel("Navbar 2"),
tabPanel("Navbar 3")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
install.packages('shinythemes')
shinyApp(
ui = tagList(
shinythemes::themeSelector(),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"shinythemes",
tabPanel("Navbar 1",
sidebarPanel(
fileInput("file", "File input:"),
textInput("txt", "Text input:", "general"),
sliderInput("slider", "Slider input:", 1, 100, 30),
tags$h5("Deafult actionButton:"),
actionButton("action", "Search"),
tags$h5("actionButton with CSS class:"),
actionButton("action2", "Action button", class = "btn-primary")
),
mainPanel(
tabsetPanel(
tabPanel("Tab 1",
h4("Table"),
tableOutput("table"),
h4("Verbatim text output"),
verbatimTextOutput("txtout"),
h1("Header 1"),
h2("Header 2"),
h3("Header 3"),
h4("Header 4"),
h5("Header 5")
),
tabPanel("Tab 2"),
tabPanel("Tab 3")
)
)
),
tabPanel("Navbar 2"),
tabPanel("Navbar 3")
)
),
server = function(input, output) {
output$txtout <- renderText({
paste(input$txt, input$slider, format(input$date), sep = ", ")
})
output$table <- renderTable({
head(cars, 4)
})
}
)
runApp()
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- as.data.frame(matrix(0, ncol = 20, nrow = 5))
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- as.data.frame(matrix(0, ncol = 20, nrow = 5))
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- as.data.frame(matrix(0, ncol = 20, nrow = 5))
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- as.data.frame(matrix(0, ncol = 20, nrow = 5))
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
runApp()
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server = function(input, output) {
data1 <- reactive({
validate(
need(input$user_file, "Upload a file!")
)
inFile <- input$user_file
if (is.null(inFile)){return(NULL)}
isolate({
my_data <- read.csv(inFile$datapath, header = input$header,sep = input$sep, quote = input$quote)
})
})
get_predictions <- reactive({
#if(input$load_button == 0){return()}
df <- data1()
if(is.null(df)){return()}
predictions(df)
})
# User data preview.
output$user_data <- renderTable({
df <- data1()
df[1:6]
})
# Model predictions.
output$model_predictions <- renderTable({get_predictions()})
output$downloadData <- downloadHandler(
filename = function() {
'predictions.csv'
},
content = function(file) {
write.csv(get_predictions(), file, row.names=FALSE)
}
)
}
shinyApp(ui = ui,server = server)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- as.data.frame(matrix(0, ncol = 20, nrow = 5))
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
library(shinythemes)
ui <- fluidPage(theme = shinytheme("Spacelab"),
fluidRow(
column(
dataTableOutput(outputId = "table"), width = 6)
)
)
server <- function(input, output){
df <- read.csv('input data.csv')
output$table <- renderDataTable({df},
options = list(scrollX = TRUE))
}
shinyApp(ui = ui,server = server)
runApp()
runApp()
# first remember the names
n <- df.aree$name
# transpose all but the first column (name)
df.aree <- as.data.frame(t(df.aree[,-1]))
colnames(df.aree) <- n
df.aree$myfactor <- factor(row.names(df.aree))
str(df.aree) # Check the column types
mtcars
mtcars.transpose()
t(mtcars)
runApp()
df
df1
t(df1)
runApp()
df1
runApp()
mydf = df1
tmydf = setNames(data.frame(t(mydf[,-1])), mydf[,1])
tmydf
runApp()
df
df1
df1.data
df1.index
df1
df1
df -> t(df1)
df
df <- t(df1)
df
df[0]
df1[0]
df1.shape
df1.shape()
df1[1]
df1[2]
print df1
print(df1)
runApp()
df
df.pivot_table()
install.packages('reshape')
library(reshape)
runApp()
df
df1
df = read.csv('input data.csv', header=FALSE)
df
df[,1]
df[1,]
df[0,]
df[0:,]
df[0:1,]
df[1:2,]
df[2:3,]
runApp()
install.packages(dplyr)
install.packages('dplyr')
library(dplyr)
library(dplyr)
df
add_rownames(df, "VALUE")
df = read.csv('input data.csv')
add_rownames(df, "VALUE")
runApp()
df
df = read.csv('input data.csv', header=FALSE)
df[2:3]
runApp()
df
df[1]
df[1,]
df[2,]
runApp()
df = read.csv('input data.csv', header=FALSE)
df
predictions(df)
colnames(df) = df[1, ] # the first row will be the header
df = df[-1, ]          # removing the first row.
df
df = read.csv('input data.csv', header=FALSE)
df
colnames(df) = df[1, ] # the first row will be the header
df = df[-1, ]          # removing the first row.
df
df = read.csv('input data.csv', header=FALSE)
runApp()
DF = df
colnames(DF) <- as.character(unlist(DF[1,])
DF = DF[-1, ]
colnames(DF) <- as.character(unlist(DF[1,])
)
colnames(DF) <- as.character(unlist(DF[1,])
)
DF = DF[-1, ]
DF
predictions(DF)
View(DF)
DF.index
DF
for (active_model in models$id) {
# Load the model
model_details = models[models$id==active_model,]
load(model_details$rda_file)
my_rf = model_details$forest_name
# Run the prediction and append it to dataframe "predictions"
result = data.frame(
model = active_model,
prediction = round(exp(predict(get(my_rf), newdata = my_data.ds))/100)*100
)
predictions = rbind(predictions, result)
}
runApp()
DF
df
dat <- df
df
names(dat) <- as.matrix(dat[1, ])
dat <- dat[-1, ]
dat[] <- lapply(dat, function(x) type.convert(as.character(x)))
dat
runApp()
library(shiny)
ui <- shinyUI(fluidPage(
titlePanel("Old Faithful Geyser Data"),
fluidRow(
column(2,
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
style="overflow-x: scroll; overflow-y: scroll"),
column(8,
plotOutput("distPlot")),
column(2,
textInput("test", "Test"),
style="overflow-x: scroll; overflow-y: scroll")
)
))
server <- shinyServer(function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyApp(ui = ui, server = server)
